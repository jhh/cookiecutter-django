# just manual: https://github.com/casey/just#readme

_default:
  @just --list

# bootstrap the development environment
bootstrap: pre-commit update

# open the project in Pycharm
edit:
  pycharm .

# run the development server
run check="none": update-css
    {% raw %}python {{ if check != "none" { "-X dev" } else { "" } }} manage.py runserver{% endraw %}

# update CSS and download all JS dependencies
update: venv update-css update-htmx update-hyperscript
    direnv reload

# update CSS
update-css:
    tailwindcss -i {{ cookiecutter.project_slug }}/static/css/base.css -o {{ cookiecutter.project_slug }}/static/css/main.css

CURL := "curl --no-progress-meter --location"
JS_DIR := "{{ cookiecutter.project_slug }}/static/js"

HTMX_BASE := "https://unpkg.com/htmx.org/dist"
HTMX_EXT_BASE := "https://unpkg.com/htmx.org/dist/ext"
HTMX_JS := "htmx.min.js"
CLASS_TOOLS_JS := "class-tools.js"

# update the HTML library
update-htmx:
    {%- raw %}
    {{ CURL }} {{ HTMX_BASE }}/{{ HTMX_JS }} --output {{ JS_DIR }}/{{ HTMX_JS }}
    {{ CURL }} {{ HTMX_EXT_BASE }}/{{ CLASS_TOOLS_JS }} --output {{ JS_DIR }}/{{ CLASS_TOOLS_JS }}

    # add newline so pre-commit doesn't complain
    echo "" >> {{ JS_DIR }}/{{ HTMX_JS }}
    echo "" >> {{ JS_DIR }}/{{ CLASS_TOOLS_JS }}
    {%- endraw %}

HYPERSCRIPT_BASE := "https://unpkg.com/hyperscript.org"
HYPERSCRIPT_VERSION := "0.9.12"
HYPERSCRIPT_JS := "_hyperscript.min.js"

update-hyperscript:
    {%- raw %}
    {{ CURL }} {{ HYPERSCRIPT_BASE }}@{{ HYPERSCRIPT_VERSION }} --output {{ JS_DIR }}/{{ HYPERSCRIPT_JS }}
    {%- endraw %}


# update dev dependencies to latest version
update-dev: && poetry-check
    poetry add --group=dev --lock black@latest
    poetry add --group=dev --lock django-debug-toolbar@latest
    poetry add --group=dev --lock ipython@latest
    poetry add --group=dev --lock rich@latest

# checks poetry.lock against the version of pyproject.toml and locks if neccessary
poetry-check:
    poetry check --lock --quiet || (just poetry-lock)

# locks the python packages in pyproject.toml without updating the poetry env
poetry-lock:
    poetry lock --no-update

# install pre-commit hooks
pre-commit:
    pre-commit install --install-hooks

# refresh the python packages in the dev env
venv: poetry-check
    nix build .#devEnv -o .venv
